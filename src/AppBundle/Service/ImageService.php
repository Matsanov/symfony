<?php
/**
 * Created by PhpStorm.
 * User: mac_v
 * Date: 2/20/2018
 * Time: 5:56 PM
 */

namespace AppBundle\Service;


use AppBundle\Entity\Image;
use AppBundle\Entity\User;
use AppBundle\Repository\ImageRepository;
use AppBundle\Repository\UserRepository;
use Doctrine\ORM\EntityManager;

class ImageService implements ImageServiceInterface
{
    /**
     * @var EntityManager
     */
    private $entityManager;

    /**
     * @var ImageRepository
     */
    private $imageRepository;

    /**
     * @var UserRepository
     */
    private $userRepository;

    /**
     * @var UserServiceInterface
     */
    private $userService;

    /**
     * @var User
     */
    private $user;

    /**
     * UserService constructor.
     * @param EntityManager $entityManager
     * @param ImageRepository $imageRepository
     * @param UserRepository $userRepository
     * @param User $user
     */
    public function __construct(EntityManager $entityManager, ImageRepository $imageRepository, UserServiceInterface $userService ,UserRepository $userRepository ,User $user)
    {
        $this->imageRepository = $imageRepository;
        $this->entityManager = $entityManager;
        $this->userRepository = $userRepository;
        $this->userService = $userService;
        $this->user = $user;
    }

    /**
     * @param $image Image
     * @param $parameter
     * @return mixed|void
     */
    public function upload($image,$parameter,$id){
        // $file stores the uploaded PDF file
        /**
         * @var \Symfony\Component\HttpFoundation\File\UploadedFile $file
         */
        $file = $image->getImage();

        $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

        // Move the file to the directory where brochures are stored
        $file->move(
            $parameter,
            $fileName
        );

        /**
         * @var $userId User
         */
        $userId = $this->userRepository->findOneBy(['id' => $id]);


        $image->setDateAdded(new \DateTime('now'));
        $image->setImage($fileName);
        $image->setName($fileName);
        $image->setUser($userId);

        $this->entityManager->persist($image);
        $this->entityManager->flush();
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function allImages(){

        return $this->imageRepository->findAll();

    }

    public function userImages($id){

        return $this->imageRepository->userImages($id);
    }

}